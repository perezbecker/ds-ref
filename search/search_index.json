{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#home","text":"For full documentation visit mkdocs.org .","title":"Home"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"acronyms/","text":"Acronyms To sort lines alphabetically below this header run the following command in vim: :6,$sort i DCU - Digital Crimes Unit HPO - Hyper Parameter Optimization MIR - Managed Inference Resource OFE - Online Feature Extraction PW - Pairwise RBAC - Role-based access control","title":"Acronyms"},{"location":"acronyms/#acronyms","text":"To sort lines alphabetically below this header run the following command in vim: :6,$sort i DCU - Digital Crimes Unit HPO - Hyper Parameter Optimization MIR - Managed Inference Resource OFE - Online Feature Extraction PW - Pairwise RBAC - Role-based access control","title":"Acronyms"},{"location":"AML_DPv2/E2E_example/","text":"E2E Example Testing '''dadfad fa''' dfadfaadf","title":"E2E Example"},{"location":"AML_DPv2/E2E_example/#e2e-example","text":"Testing '''dadfad fa''' dfadfaadf","title":"E2E Example"},{"location":"Linux/bash/","text":"bash sudo cat issue: sudo cat input1.txt input2.txt > output.txt gives a permission denied. The problem is that the redirection is being processed by your original shell, not by sudo. Shells are not capable of reading minds and do not know that that particular >> is meant for the sudo and not for it. You need to: quote the redirection (so it is passed on to sudo ) and use sudo -s (so that sudo uses a shell to process the quoted redirection.) sudo bash -c 'cat input1.txt input2.txt > output.txt' sudo -s 'cat input1.txt input2.txt > output.txt'","title":"bash"},{"location":"Linux/bash/#bash","text":"","title":"bash"},{"location":"Linux/bash/#sudo-cat","text":"issue: sudo cat input1.txt input2.txt > output.txt gives a permission denied. The problem is that the redirection is being processed by your original shell, not by sudo. Shells are not capable of reading minds and do not know that that particular >> is meant for the sudo and not for it. You need to: quote the redirection (so it is passed on to sudo ) and use sudo -s (so that sudo uses a shell to process the quoted redirection.) sudo bash -c 'cat input1.txt input2.txt > output.txt' sudo -s 'cat input1.txt input2.txt > output.txt'","title":"sudo cat"},{"location":"WSL2/setup/","text":"Setting up Change default browser, to allow interactive authentication with Azure ML sudo update-alternatives --config x-www-browser There are 2 choices for the alternative x-www-browser (providing /usr/bin/x-www-browser). Selection Path Priority Status ------------------------------------------------------------ * 0 /usr/bin/chromium-browser 40 auto mode 1 /usr/bin/chromium-browser 40 manual mode 2 /usr/bin/wslview 30 manual mode Press <enter> to keep the current choice[*], or type selection number: 2 update-alternatives: using /usr/bin/wslview to provide /usr/bin/x-www-browser (x-www-browser) in manual mode","title":"Setting up"},{"location":"WSL2/setup/#setting-up","text":"Change default browser, to allow interactive authentication with Azure ML sudo update-alternatives --config x-www-browser There are 2 choices for the alternative x-www-browser (providing /usr/bin/x-www-browser). Selection Path Priority Status ------------------------------------------------------------ * 0 /usr/bin/chromium-browser 40 auto mode 1 /usr/bin/chromium-browser 40 manual mode 2 /usr/bin/wslview 30 manual mode Press <enter> to keep the current choice[*], or type selection number: 2 update-alternatives: using /usr/bin/wslview to provide /usr/bin/x-www-browser (x-www-browser) in manual mode","title":"Setting up"},{"location":"git/branch_workflow/","text":"Branch workflow Continue working while waiting on PR To avoid having to wait for a pull request to approved to continue working on a feature that depends on it, use the following workflow: Create branch A based on the main branch and develop your code. Create pull request for A . Create branch B based on branch A and begin working on it. Once pull request for A has been approved, merge it to main . Commit all your changes on branch B . Update your local copy of main: git checkout main git pull Merge main into branch B : git checkout B git merge main Solve all merge conflicts. Usually it is OK to accept the newest version of the files (as you probably updated them in the changes you did from branch A to B ). All the files in main that were changed or added since branch B was created will be merged as well (you can ignore those). Once you have merged main in to B , push it to the source: git push Create pull request for branch B . Repeat cycle as necessary.","title":"Branch workflow"},{"location":"git/branch_workflow/#branch-workflow","text":"","title":"Branch workflow"},{"location":"git/branch_workflow/#continue-working-while-waiting-on-pr","text":"To avoid having to wait for a pull request to approved to continue working on a feature that depends on it, use the following workflow: Create branch A based on the main branch and develop your code. Create pull request for A . Create branch B based on branch A and begin working on it. Once pull request for A has been approved, merge it to main . Commit all your changes on branch B . Update your local copy of main: git checkout main git pull Merge main into branch B : git checkout B git merge main Solve all merge conflicts. Usually it is OK to accept the newest version of the files (as you probably updated them in the changes you did from branch A to B ). All the files in main that were changed or added since branch B was created will be merged as well (you can ignore those). Once you have merged main in to B , push it to the source: git push Create pull request for branch B . Repeat cycle as necessary.","title":"Continue working while waiting on PR"},{"location":"vim/commands/","text":"commands sort lines : alphabetically, case insensitive: %sort i","title":"commands"},{"location":"vim/commands/#commands","text":"sort lines : alphabetically, case insensitive: %sort i","title":"commands"},{"location":"vim/ranges/","text":"ranges source A range permits a command to be applied to a group of lines in the current buffer. For most commands, the default range is the current line. For example: :s/old/new/g changes all old to new in the current line :11,15s/old/new/g changes lines 11 to 15 inclusive :%s/old/new/g changes all lines Examples Range Description Example 21 line 21 :21s/old/new/g 1 first line :1s/old/new/g $ last line :$s/old/new/g . current line :.w single.txt % all lines (same as 1,$) :%s/old/new/g 21,25 lines 21 to 25 inclusive :21,25s/old/new/g 21,$ lines 21 to end :21,$s/old/new/g .,$ current line to end :.,$s/old/new/g .+1,$ line after current line to end :.+1,$s/old/new/g .,.+5 six lines (current to current+5 inclusive) :.,.+5s/old/new/g .,.5 same (.5 is interpreted as .+5) :.,.5s/old/new/g","title":"ranges"},{"location":"vim/ranges/#ranges","text":"source A range permits a command to be applied to a group of lines in the current buffer. For most commands, the default range is the current line. For example: :s/old/new/g changes all old to new in the current line :11,15s/old/new/g changes lines 11 to 15 inclusive :%s/old/new/g changes all lines","title":"ranges"},{"location":"vim/ranges/#examples","text":"Range Description Example 21 line 21 :21s/old/new/g 1 first line :1s/old/new/g $ last line :$s/old/new/g . current line :.w single.txt % all lines (same as 1,$) :%s/old/new/g 21,25 lines 21 to 25 inclusive :21,25s/old/new/g 21,$ lines 21 to end :21,$s/old/new/g .,$ current line to end :.,$s/old/new/g .+1,$ line after current line to end :.+1,$s/old/new/g .,.+5 six lines (current to current+5 inclusive) :.,.+5s/old/new/g .,.5 same (.5 is interpreted as .+5) :.,.5s/old/new/g","title":"Examples"}]}